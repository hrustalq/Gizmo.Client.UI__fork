@namespace Gizmo.Web.Components
@inherits CustomDOMComponentBase

<CascadingValue Value="@this">

    <div class="@Class @ClassName"
         style="@Style"
         @onmouseover="OnMouseOverHandler"
         @onmouseout="OnMouseLeaveHandler">

        @if (!IsContextMenu)
        {
            <div @onmousedown="OnMouseDownHandler"
                 @oncontextmenu="OnContextMenuHandler"
                 @oncontextmenu:preventDefault="@(ActivationEvent == MenuActivationEvents.RightClick)"
                 >
                 
                @if (Activator != null)
                {
                    @Activator
                }
                else
                {
                    @if (!string.IsNullOrEmpty(Icon) || SVGIcon.HasValue)
                    {
                        <Button Variant="@Variant"
                                Size="@Size"
                                RightIcon="@Icon"
                                RightSVGIcon="SVGIcon">
                            @Label
                        </Button>
                    }
                    else
                    {
                        <Button Variant="@Variant"
                                Size="@Size"
                                RightSVGIcon="@(IsOpen ? Icons.TriangleUp : Icons.TriangleDown)">
                            @Label
                        </Button>
                    }
                }
            </div>
        }

        <Popup @bind-IsOpen="IsOpen" Class="@PopupClassName" Style="@PopupStyleValue" CloseOnClick="@CloseOnItemClick"
               OpenDirection="@(IsContextMenu ? PopupOpenDirections.Cursor : OpenDirection)" CanFocus="@IsContextMenu">
            <List @ref="_popupContent"
                  Direction="@Direction"
                  ExpandBottomToTop="@ExpandBottomToTop"
                  PreserveIconSpace="@PreserveIconSpace"
                  CanClick="true"
                  OnClickItem="@(() => OnClickMenuItemHandler())">
                @ChildContent
            </List>
        </Popup>
    </div>

</CascadingValue>